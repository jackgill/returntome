#!/usr/bin/perl

use strict;
use warnings;

use DBI;

use CGI qw(:standard *table); #function based interface to CGI module, start_table and end_table tags
use CGI::Carp qw(fatalsToBrowser); #send errors to browser as well as server error log

use lib '..';
use Mod::Conf;
use Mod::Crypt;

#Make the webpage:
print header, start_html('Return To Me');

#Make the banner:
print h1("Return To Me"),
    br(),
    h4('Admin view of database'),
    br();

#Make the form:
print start_form,
    "Decryption key: ",
    password_field('key','',10,10),
    br,
    submit,
    end_form;

#Handle form submission:
if (param) {
    my $key = param('key');
    displayTable($key);
}

print end_html();


sub displayTable {
    my $key = shift;

    #Read conf file:
    my $conf_file = '../conf/talaria.conf';
    my %conf = getConf($conf_file, $key);

    unless (%conf) {
        print h4('Invalid decryption key.');
        return;
    }

    #Connect to DB:
    my $dbh = DBI->connect(
        "DBI:mysql:database=$conf{db_server}",
        $conf{db_user},
        $conf{db_pass},
        {PrintError => 0, RaiseError => 1}
    );

    my $table_ref = $dbh->selectall_arrayref("SELECT Messages.uid, Messages.address, Messages.received_time, Messages.return_time, Messages.sent_time, AES_DECRYPT(RawMail.mail, '$conf{db_key}'), AES_DECRYPT(ParsedMail.mail, '$conf{db_key}') FROM Messages INNER JOIN ParsedMail INNER JOIN RawMail WHERE Messages.uid = ParsedMail.uid AND Messages.uid = RawMail.uid");
    print_table($table_ref,'Active Messages');

    $table_ref = $dbh->selectall_arrayref("SELECT uid, address, received_time, return_time, sent_time, AES_DECRYPT(raw_mail, '$conf{db_key}'), AES_DECRYPT(parsed_mail, '$conf{db_key}') FROM Archive");
    print_table($table_ref,'Archive');

    $dbh->disconnect();
}

sub print_table {
    my $table_ref = shift;
    my $table_name = shift;

    print start_table({-border=>1});
    print caption( h4($table_name) );
    my $col_names = ['UID','Address','Received Time','Return Time','Sent Time','Raw Mail','Parsed Mail'];
    print Tr( th( $col_names ) );
    for my $row (@{ $table_ref }) {
	print "<tr>";
	for (my $i = 0; $i < 7; $i++) {
	    print "<td>";
            if ($i > 4) {
		print '<div style="overflow:auto; height:200px;width:400px;">';
		print pre( escapeHTML( $row->[$i] ) );
		print "</div>";
	    } else {
                if ($row->[$i]) {
                    print pre( escapeHTML( $row->[$i] ) );
                }
                else {
                    print 'NONE';
                }
	    }
	    print "</td>";
	}
	print "</tr>";
    }
    print end_table;
}
